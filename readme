

执行方式  nohup python manage.py  runserver 0.0.0.0:8080 >> svnmanager.log &

注意：以后不能再新加分组，只能在分组内添加新的web机器。因为上面的这个原因。如果超过一个分组，将会出现bug


svnmanager.log是记录的启动日志文件
操作日志在app01下的log目录里


1:20170415 修改onlinecode.html  比较 onlnecode.html和onlinecode.html.201704151106的这个文件。。
没找出不同，在本地win7测试是正常的，在这里就不正常，后用了本地的文件，一切正常。需要比较找出问题。
具体的问题是 当推送的时候 获取的host.id 一直是第一个的host的id  用了本地的html后测试正常。


修改的东西
1：views文件的onlinecode函数和pushonline
具体比较备份后的文件。大致就是获取所有dhost主机 用于在onlinecode.html展示 可选框
2：request.user.username   获取当前用户，用于记录日志。去掉了之前定义全局 aaa 变量获取当前用户的笨方法，笨方法当服务重启后aaa变量就未定义了，所以当时设置超时时间，强制用户重新登录。现在正常。
3：添加onlinecode函数的搜索选项，其中没有使用 dhost。具体看代码和代码注释。

20170417  
1：修改表结构models文件，添加rsync同步时排除的东西。登录admin后台可以发现多了sexcludedir字段。
2：修改views 添加 rsync参数 --exclude-form参数 
3：修改admin.py 让admin页面的online可以多个字段展示。

20170421
django和apache结合。大致就是安装 mod_wsgi-4.5.2.tar.gz
然后重新编译python以及之前安装的N个第三方库如:paramiko pip django setuptools等等，根据提示安装吧，编译python时 添加 --enable-shared参数。根据报错去做安装调试吧。这里不做介绍
修改apache配置文件all.conf  修改项目setting.py文件   添加django.wsgi文件
关键在与配置文件的配置,和目录下权限的配置。详细参考git上的记录

20170424
views.py添加IP限制  详细见login代码  想美观一点就写一个美观的403页面。


需要留意svn up后的文件权限是不是www！！！以修改

20170425
修改models的host字段，添加允许密码处为空，blank=True,null=True
删除 admin后台host选项的密码
修改views.py  读取os.system后的结果，出现ascii这中结果，把readlines改成了read一切正常
取消了svnup和回滚的时候密码验证选项 几乎用不到了app01function.py这个文件了
取消了rsync推送代码的时候密码验证选项
取消密码验证和svnup的时候权限问题一起解决。普通用户登录 重新 svn co，然后平台更新的时候重新输入验证选项。  取消密码验证之后，盘古发布平台就只能和svn放在一个服务器上了，不能把svn代码按项目发布到其他服务器上了，只能通过rsync的方式推送，前提是sshkey打通。
添加获取所有日志在前端展示


20170426
添加权限控制，具体使用方式登录admin，然后在权限表里操作。
权限名称 就是models中定义的权限
URL名称 就是具体访问的某个url 就是在urls.py里的name字段
以上两个字段必须和models中和url中的一致。
然后在views.py里对该函数添加装饰器。即@check_permission
添加这个为拒绝的权限，如果普通用户需要访问，需要单独对普通用户授权。
点击admin 的User选项，具体的赋权操作

20170428
添加项目权限控制，实现按人员和项目进行权限的划分。具体登录admin后台查看使用。
添加cmdb功能

20170518
修改前端推送的时候的页面显示问题
添加 pushcode.html
修改views pushcode函数，把resp结果以")"分割转成列表形式，便于 pushcode.html循环列表读出返回的结果
去除 推送的时候推送 .svn的信息 ，在rsync_exclude_file内添加
切割操作日志 只读取7天内的日志，七天前的都仍在 ../logs 目录里


20170523
开始计划任务的编写
修改base.html 和 login.html 主要就是分开 做成一个统一的平台
由盘古发布系统 做成 运维系统
里面暂时分成两大块。一个是发布管理，一个是任务管理
另外创建新的app项目 即cronsvnmanager
添加urls.py的跳转，添加cron的models文件 添加cron的urls 添加views 添加templete的cron的index.html

20170524
同步数据报错，无法访问.问题应该出在之前的models上,好像又没错，代码在win7上正常，win7上创建cronapp项目
然后在linux上同步的数据。makemigrations migrate
公司出口IP发生了改变，添加了允许访问的IP

20170525-26
实现计划任务前端页面和后台的增删改差。
添加新的js 和jquery 实现输入框为空时就不让提交。

20170531
修改 svnmanager  app01的views.py  的 onlinecode 函数，以组为获取的点，修改从host获取dhost，去除发布机在选择框。
然后删除 TestMachine 组 ，此组包含发布机。
注意：以后不能再新加分组，只能在分组内添加新的web机器。因为上面的这个原因。如果超过一个分组，将会出现bug

20170606
大致写完了计划任务管理平台
流程 新添加计划任务，计划任务保存在当前路径下，已IP_runuser_cronfile为准
此时并未推送到线上，当选中id号 审核执行的时候才是正式推送到线上。
当审核执行的时候会保存 远端服务器的crontab的文件到发布机的/home/crontabak
注意点：
1：为其他主机 /var/spool/cron/ 赋权 不然操作失败(此行解释失效，没用,见0607的修改)
2：运行者只能是两个身份，一个是root 一个是www1   新增计划任务的时候一定得写运行者是谁
3：端口只能是4591  因为scp的时候写死了
4：一切以web端显示为主，如果私自修该了其他主机的crontab  那么下次审核执行的时候就把你写的覆盖掉了
5：

添加权限控制，没有在写入数据库，而是之间写了一个装饰器，里面有列表，更新permission里的列表即可。
添加 www1和www的映射关系。

20170607
因为运行该项目的为www用户 当操作root的计划任务时总是出现各种问题，改了/var/spool/cron/root
后 该root计划任务就不执行了，不明白。只能单独想办法让www以root方式远程到目标机器去操作。
方式 sshpass 实现




20170606
大致写完了计划任务管理平台
流程 新添加计划任务，计划任务保存在当前路径下，已IP_runuser_cronfile为准
此时并未推送到线上，当选中id号 审核执行的时候才是正式推送到线上。
当审核执行的时候会保存 远端服务器的crontab的文件到发布机的/home/crontabak
注意点：
1：为其他主机 /var/spool/cron/ 赋权 不然操作失败(此行解释失效，没用,见0607的修改)
2：运行者只能是两个身份，一个是root 一个是xiaogangtao   新增计划任务的时候一定得写运行者是谁
3：端口只能是4591  因为scp的时候写死了
4：一切以web端显示为主，如果私自修该了其他主机的crontab  那么下次审核执行的时候就把你写的覆盖掉了
5：

添加权限控制，没有在写入数据库，而是之间写了一个装饰器，里面有列表，更新permission里的列表即可。
添加 www和xiaogangtao的映射关系。

20170607
因为运行该项目的为xiaogangtao用户 当操作root的计划任务时总是出现各种问题，改了/var/spool/cron/root
后 该root计划任务就不执行了，不明白。只能单独想办法让xiaogangtao以root方式远程到目标机器去操作。
方式 sshpass 实现

20170609
之前的逻辑是想以数据库为准，或者已crontab文件为准，最后选择了数据库，但是这样面临一个问题。
当直接操作crontab时，当数据库这边没有，审核执行的时候会把文件内手动添加的覆盖掉。
最后解决是从crontab读取到本地一份，然后在操作数据库，最后已追加的方式到本地读取的文件，然后写到远端机器。
还有当crontab里有两份相同的计划任务时，如何确保禁用启用的就是数据库里的那一个计划任务，解决办法是：
往计划任务插入的时候 把cronid和cronname都插入进去，作为唯一判断标识符，然后修改该计划任务。
当删除某个计划任务在crontab不存在，但是数据库还存在的时候，加了一个try except 判断。


20170615开始CMDB
构建表结构，调用ansibleAPI获取信息






























"""
#sshpass 不需要创建密钥可以直接指定远端服务器密码登录
#sshpass yum 安装，并指定密码登录
#[root@m01 ~]# cd /etc/yum.repos.d/
#[root@m01 yum.repos.d]# wget http://download.opensuse.org/repositories/home:Strahlex/CentOS_CentOS-6/home:Strahlex.repo
#[root@m01 yum.repos.d]# yum -y install sshpass
#[root@m01 ~]# ssh -p22 root@172.16.1.31                     （使用sshpass 最好先用ssh登录一下，第一次使用sshpass不生效）
#[root@m01 ~]# sshpass -p 123456 ssh 172.16.1.31
#Address 172.16.1.31 maps to localhost, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
#Last login: Tue May 24 00:55:24 2016 from 172.16.1.51
#[root@web ~]#
#使用sshpass 实现远程拷贝目录
#[root@m01 ~]# sshpass -p  123456  scp -P22  -pr  test/  root@172.16.1.31:/tmp/
#或者将密码保存到文件，实现远程拷贝目录，需要使用-f指定密码文件
#[root@m01 ~]# echo "123456" > ssh.passwd
#[root@m01 ~]# sshpass  -f  ssh.passwd scp -P22  -pr  test/  root@172.16.1.31:/tmp/

"""
sshpass yum源 

'''
[home_Strahlex]
name=Strahlex's Home Project (CentOS_CentOS-6)
type=rpm-md
baseurl=http://download.opensuse.org/repositories/home:/Strahlex/CentOS_CentOS-6/
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/Strahlex/CentOS_CentOS-6//repodata/repomd.xml.key
enabled=1

'''



